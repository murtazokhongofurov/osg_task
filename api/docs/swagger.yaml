basePath: /v1
definitions:
  models.AllComment:
    properties:
      created_at:
        items:
          $ref: '#/definitions/models.CommentRes'
        type: array
    type: object
  models.AllProject:
    properties:
      projects:
        items:
          $ref: '#/definitions/models.ProjectRes'
        type: array
    type: object
  models.AllTask:
    properties:
      tasks:
        items:
          $ref: '#/definitions/models.TaskRes'
        type: array
    type: object
  models.AttendanceReq:
    properties:
      employee_id:
        type: string
      type:
        type: string
    type: object
  models.AttendanceRes:
    properties:
      created_at:
        type: string
      employee_id:
        type: string
      id:
        type: integer
      type:
        type: string
      updated_at:
        type: string
    type: object
  models.AttendanceUpdateReq:
    properties:
      employee_id:
        type: string
      id:
        type: integer
      type:
        type: string
    type: object
  models.CommentReq:
    properties:
      developer_id:
        type: string
      task_id:
        type: integer
      text:
        type: string
    type: object
  models.CommentRes:
    properties:
      created_at:
        type: string
      developer_id:
        type: string
      id:
        type: integer
      task_id:
        type: integer
      text:
        type: string
    type: object
  models.CommentUpdateReq:
    properties:
      id:
        type: integer
      text:
        type: string
    type: object
  models.DeveloperReq:
    properties:
      developer_role:
        type: string
      employee_id:
        type: string
    type: object
  models.DeveloperRes:
    properties:
      developer_role:
        type: string
      employee_id:
        type: string
      id:
        type: string
    type: object
  models.EmployeeList:
    properties:
      employees:
        items:
          $ref: '#/definitions/models.EmployeeRes'
        type: array
    type: object
  models.EmployeeReq:
    properties:
      birth_date:
        example: 2006/01/02
        type: string
      full_name:
        type: string
      phone:
        type: string
      position:
        type: string
      profile_photo:
        type: string
      role:
        type: string
    type: object
  models.EmployeeRes:
    properties:
      birth_date:
        example: 2006/01/02
        type: string
      full_name:
        type: string
      id:
        type: string
      phone:
        type: string
      position:
        type: string
      profile_photo:
        type: string
      role:
        type: string
    type: object
  models.FailureInfo:
    properties:
      description:
        type: string
      error: {}
      status_code:
        type: integer
    type: object
  models.FileResponse:
    properties:
      media_type:
        type: string
      url:
        type: string
    type: object
  models.GetEmployee:
    properties:
      access_token:
        type: string
      birth_date:
        type: string
      full_name:
        type: string
      id:
        type: string
      phone:
        type: string
      position:
        type: string
      profile_photo:
        type: string
      role:
        type: string
    type: object
  models.ProjectReq:
    properties:
      admin_id:
        type: string
      file_url:
        type: string
      finished_date:
        example: 2006/01/02
        type: string
      project_name:
        type: string
      started_date:
        example: 2006/01/02
        type: string
    type: object
  models.ProjectRes:
    properties:
      admin_id:
        type: string
      file_url:
        type: string
      finished_date:
        example: 2006/01/02
        type: string
      id:
        type: integer
      project_name:
        type: string
      started_date:
        example: 2006/01/02
        type: string
      status:
        type: string
    type: object
  models.StatusUpdate:
    properties:
      id:
        type: integer
      status:
        type: string
    type: object
  models.Success:
    properties:
      message:
        type: string
      status_code:
        type: integer
    type: object
  models.TaskReq:
    properties:
      description:
        type: string
      end_date:
        example: 2006/01/02
        type: string
      file_url:
        type: string
      started_date:
        example: 2006/01/02
        type: string
      teamlead_id:
        type: string
      title:
        type: string
    type: object
  models.TaskRes:
    properties:
      created_at:
        type: string
      description:
        type: string
      end_date:
        example: 2006/01/02
        type: string
      file_url:
        type: string
      id:
        type: integer
      started_date:
        example: 2006/01/02
        type: string
      status:
        type: string
      teamlead_id:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.TaskUpdateReq:
    properties:
      description:
        type: string
      end_date:
        example: 2006/01/02
        type: string
      file_url:
        type: string
      id:
        type: integer
      started_date:
        example: 2006/01/02
        type: string
      title:
        type: string
    type: object
host: localhost:7777
info:
  contact:
    email: gofurovmurtazoxon@gmail.com
    name: Murtazoxon
    url: https://t.me/murtazokhon_gofurov
  description: This is Task api server
  termsOfService: 2 term OSG
  title: Online Service Group Task api
  version: "1.0"
paths:
  /:
    put:
      consumes:
      - application/json
      description: Through this api, can update attendance
      parameters:
      - description: UpdateAttendance
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AttendanceUpdateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AttendanceRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: Update attendance
      tags:
      - Attendance
  /attendance:
    post:
      consumes:
      - application/json
      description: Through this api, can create attendance
      parameters:
      - description: CreateAttendance
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AttendanceReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AttendanceRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: Create attendance
      tags:
      - Attendance
  /comment:
    post:
      consumes:
      - application/json
      description: Through this api, can create comment
      parameters:
      - description: CreateComment
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CommentReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CommentRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: Create comment
      tags:
      - Comment
    put:
      consumes:
      - application/json
      description: Through this api, can UPDATE comments
      parameters:
      - description: Update comment
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.CommentUpdateReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AllComment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.CommentRes'
      security:
      - BearerAuth: []
      summary: UPDATE comment
      tags:
      - Comment
  /comment/{id}:
    delete:
      consumes:
      - application/json
      description: Through this api, can delete comment
      parameters:
      - description: commentId
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: DELETE comment
      tags:
      - Comment
    get:
      consumes:
      - application/json
      description: Through this api, can get comments
      parameters:
      - description: taskId
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AllComment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: GET comments
      tags:
      - Comment
  /developer:
    post:
      consumes:
      - application/json
      description: Through this api, can create a developer
      parameters:
      - description: CreateRole
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.DeveloperReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.DeveloperRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: Create an employee
      tags:
      - Developer
  /employee:
    post:
      consumes:
      - application/json
      description: Through this api, can create an employee
      parameters:
      - description: CreateEmployee
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.EmployeeReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      summary: Create new employee
      tags:
      - Employee
    put:
      consumes:
      - application/json
      description: Through this api, can UPDATE an employee
      parameters:
      - description: UpdateEmployee
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.EmployeeRes'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EmployeeRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: UPDATE an employee
      tags:
      - Employee
  /employee/{id}:
    delete:
      consumes:
      - application/json
      description: Through this api, can Delete an employee
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: DELETE an employee
      tags:
      - Employee
    get:
      consumes:
      - application/json
      description: Through this api, can GET an employee
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: GET an employee
      tags:
      - Employee
  /employees:
    get:
      consumes:
      - application/json
      description: Through this api, can GET employees
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EmployeeList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: GET employees
      tags:
      - Employee
  /image-upload:
    post:
      consumes:
      - application/json
      description: Through this api can upload media file
      parameters:
      - description: image-upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.FileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: upload media file
      tags:
      - Media
  /login/{phone}:
    get:
      consumes:
      - application/json
      description: Through this api, can login an employee
      parameters:
      - description: phone_number
        in: query
        name: phone
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetEmployee'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      summary: Login an employee
      tags:
      - Login
  /project:
    post:
      consumes:
      - application/json
      description: Through this api, can create project
      parameters:
      - description: CreateProject
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ProjectReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ProjectRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: Create project
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: Through this api, can update project
      parameters:
      - description: UpdateProject
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.ProjectRes'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProjectRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: Update project
      tags:
      - Project
  /project/{id}:
    delete:
      consumes:
      - application/json
      description: Through this api, can delete a project
      parameters:
      - description: prject_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: DELETE a project
      tags:
      - Project
    get:
      consumes:
      - application/json
      description: Through this api, can get a project
      parameters:
      - description: prject_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProjectRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: Get a project
      tags:
      - Project
  /project/status:
    put:
      consumes:
      - application/json
      description: Through this api, can update project status
      parameters:
      - description: UpdateProjectStatus
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.StatusUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusUpdate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: Update project status
      tags:
      - Project
  /projects:
    get:
      consumes:
      - application/json
      description: Through this api, can get projects
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AllProject'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: Get projects
      tags:
      - Project
  /task:
    post:
      consumes:
      - application/json
      description: Through this api, can create task
      parameters:
      - description: CreateTask
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.TaskReq'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TaskRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: Create task
      tags:
      - Task
    put:
      consumes:
      - application/json
      description: Through this api, can update task
      parameters:
      - description: UpdateTask
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.TaskUpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: UPDATE task
      tags:
      - Task
  /task/{id}:
    delete:
      consumes:
      - application/json
      description: Through this api, can delete task
      parameters:
      - description: task_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Success'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: DELETE task
      tags:
      - Task
    get:
      consumes:
      - application/json
      description: Through this api, can create task
      parameters:
      - description: task_id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TaskRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: Create task
      tags:
      - Task
  /task/status:
    put:
      consumes:
      - application/json
      description: Through this api, can update task status
      parameters:
      - description: Update status
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.StatusUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.StatusUpdate'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: Update task status
      tags:
      - Task
  /tasks:
    get:
      consumes:
      - application/json
      description: Through this api, can create task
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AllTask'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: Create task
      tags:
      - Task
  /tasks/{id}:
    get:
      consumes:
      - application/json
      description: Through this api, can create task
      parameters:
      - description: GetTasks
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AllTask'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.FailureInfo'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.FailureInfo'
      security:
      - BearerAuth: []
      summary: Create task
      tags:
      - Task
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
